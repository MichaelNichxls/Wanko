//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Runtime/InputActions/WindowInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Wanko.Runtime.InputActions
{
    public partial class @WindowInputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @WindowInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""WindowInputActions"",
    ""maps"": [
        {
            ""name"": ""Window"",
            ""id"": ""8b393fb4-8314-479f-8b0b-7e15b4a90655"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3c2653bd-cc31-4fd7-afac-9afc5c4fbd4d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fa6cea9a-5d82-4d43-beb6-b843743ee6e3"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e7989f7-c261-492d-953d-0aa5e6a4a6f0"",
                    ""path"": ""<Pen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""14e95a0c-a428-4d35-9bdc-519d97d9cf93"",
                    ""path"": ""<Touchscreen>/touch*/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Window
            m_Window = asset.FindActionMap("Window", throwIfNotFound: true);
            m_Window_Position = m_Window.FindAction("Position", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Window
        private readonly InputActionMap m_Window;
        private List<IWindowActions> m_WindowActionsCallbackInterfaces = new List<IWindowActions>();
        private readonly InputAction m_Window_Position;
        public struct WindowActions
        {
            private @WindowInputActions m_Wrapper;
            public WindowActions(@WindowInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Position => m_Wrapper.m_Window_Position;
            public InputActionMap Get() { return m_Wrapper.m_Window; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(WindowActions set) { return set.Get(); }
            public void AddCallbacks(IWindowActions instance)
            {
                if (instance == null || m_Wrapper.m_WindowActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_WindowActionsCallbackInterfaces.Add(instance);
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
            }

            private void UnregisterCallbacks(IWindowActions instance)
            {
                @Position.started -= instance.OnPosition;
                @Position.performed -= instance.OnPosition;
                @Position.canceled -= instance.OnPosition;
            }

            public void RemoveCallbacks(IWindowActions instance)
            {
                if (m_Wrapper.m_WindowActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IWindowActions instance)
            {
                foreach (var item in m_Wrapper.m_WindowActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_WindowActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public WindowActions @Window => new WindowActions(this);
        public interface IWindowActions
        {
            void OnPosition(InputAction.CallbackContext context);
        }
    }
}
